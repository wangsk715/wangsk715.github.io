<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k8s集群组件</title>
      <link href="/k8s%E9%9B%86%E7%BE%A4%E7%BB%84%E4%BB%B6/"/>
      <url>/k8s%E9%9B%86%E7%BE%A4%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q0h7gb9yw.bkt.clouddn.com/image/k8s/k8s%E9%9B%86%E7%BE%A4%E7%BB%84%E4%BB%B6.png" alt="image"></p><p>AIPServer: 所有服务访问的统一入口</p><p>crontrollerManager： 维持副本的期望数目，重要组件；</p><p>Schedule： 负责接收任务，选择合适的节点进行分配任务；</p><p>etcd: 键值对数据库，存储k8s集群的所有信息（持久化）</p><p>kubelet： 直接和docker引擎交互实现生命周期管理</p><p>kube-proxy： 负责写入规则至IPTABLES ，IPVS</p><p>COREDNS： 可以为集群中的svc创建一个A记录</p><p>dashboard： 给k8s提供一个b/s结构的访问体系</p><p>Ingess Controller： 官方集群只能实现四层代理，ingress可以实现七层代理</p><p>FEDETATION：提供一个可以跨集群中心多k8s统一管理工能</p><p>Prometheus: 提供一个k8s集群的监控能力</p><p>EFK: 提供k8s集群日志统一分析接入平台</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pod</title>
      <link href="/pod%E4%BB%8B%E7%BB%8D/"/>
      <url>/pod%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>pod介绍：</p><p>pod概念：</p><p>分类：自主式pod</p><pre><code>控制器的pod</code></pre><p>每个pod都会新建一个pause的容器，会封装&gt;=1的container</p><p>容器会共享pause的网络栈，通过端口通信</p><p>容器会共享pause的存储卷</p><p>Replication Controller、Replica Set<br>Repl icationController用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的Pod来替代;而如果异常多出来的容器也会自动回收。<br><img src="http://q0h7gb9yw.bkt.clouddn.com/image/k8s/deployment.png" alt="image"><br>在新版本的Kubernetes 中建议使用Repl icaSet来取代Replicat ionControlle .<br>Repl icaSet跟ReplicationController没有本质的不同，只是名字不一样，并且ReplicaSet支持集合式的selector<br>虽然ReplicaSet可以独立使用，但一般还是建议使用Deployment 来自动管理<br>ReplicaSet，这样就无需担心跟其他机制的不兼容问题(比如ReplicaSet 不支持rolling update 但Deployment 支持)<br><img src="http://q0h7gb9yw.bkt.clouddn.com/image/k8s/horizontal-pod-autoscaler.svg" alt="image"><br>Horizontal Pod Autoscaling仅适用于Deployment 和ReplicaSet ，在V1版本中仅支持根据Pod<br>的CPU利用率扩所容，在v1alpha 版本中，支持根据内存和用户自定义的metric 扩缩容</p><p>StatefulSet是为了解决有状态服务的问题(对应Deployments 和Repl icaSets是为无状态服务而设计)，其应用场景包括:</p><p>*稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现</p><p>*稳定的网络标志，即Pod重新调度后其PodName和HostName 不变，基于Headless Service<br>(即没有Cluster IP的Service )来实现</p><p>*有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行(即从0到N-1,在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态) ,基于init containers 来实现</p><p>*有序收缩，有序删除(即从N-1到0)</p><p>DaemonSet确保全部(或者- -些) Node.上运行- 一个Pod 的副本。当有Node加入集群时，也会为他们<br>新增一个Pod。当有Node从集群移除时，，这些Pod也会被回收。删除DaemonSet 将会删除它创建<br>的所有Pod<br>使用DaemonSet 的一些 典型用法: </p><p>*运行集群存储daemon, 例如在每个Node. 上运行 glusterd、 ceph.</p><p>*在每个Node.上运 行日志收集daemon, 例如fluentd、 logstash.</p><p>*在每个Node. 上运行监控daemon, 例如Prometheus Node Exporter</p><p>Job负责批处理任务，即仅执行一次的任务， 它保证批处理任务的一一个或多个Pod成功结束<br>Cron Job管理基于时间的Job，即:</p><p>*在给定时间点只运行一次</p><p>*周期性地在给定时间点运行</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻代理问题处理汇总</title>
      <link href="/360%E8%BD%BB%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/360%E8%BD%BB%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<ol><li><p>gitlab私有服务上传不了大文件；</p></li><li><p>jhjs.nisco.cn:81域名做的反向代理发现有原先get类型的接口现在必须改成post；</p></li><li><p>反向代理做的静态资源重定向上传附件类接口都失效</p></li><li><p>有一台客户端172.18.248.51登录协同APP的管理界面失败。</p></li><li><p>一台邮件服务器安装客户端后没有显示主程序版本、病毒库、特征库。</p></li><li><p>客户端离线问题</p></li></ol><ul><li><input disabled="" type="checkbox"> 客户端版本为cetos7.7</li><li><input disabled="" type="checkbox"> 客户端版本为cetos7.4</li></ul><ol start="7"><li>（客户现场不能复现这个问题）</li><li>NGINX服务器跑轻代理CPU占用高（跑了很多关于web界面的任务，下发扫描病毒CPU占用率就高（全扫，半小时后客户卸了重装轻代理），昨天下午重装轻代理，今天下发全扫，CPU占用率正常）</li><li>一台Windows服务器离线（卸载别的杀毒软件后，重装轻代理，在线。但客户说之前也是在线，一段时间后离线，等待后续）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杀毒软件 </tag>
            
            <tag> 轻代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>棒材精整MES宕机处理过程</title>
      <link href="/%E6%A3%92%E6%9D%90%E7%B2%BE%E6%95%B4MES%E5%AE%95%E6%9C%BA%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
      <url>/%E6%A3%92%E6%9D%90%E7%B2%BE%E6%95%B4MES%E5%AE%95%E6%9C%BA%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="运维日报"><a href="#运维日报" class="headerlink" title="运维日报"></a>运维日报</h3><ol><li>描述<br>2019年21点23收到短信报警，马上赶往公司处理，发现是248.225这台机器死机造成丢包，这个点为21点35分</li><li>分析：<br>造成服务器宕机是由于操作系统处理卡死状态，重启系统更新，怀疑是否有外网权限。</li><li>处理：<br>重启248.225物理机，第一次重启结束为21点46分，系统处于更新状态，等待更新，大约在21点52分，重启过程中发生自动重启，21点58自动重启结束，继续等待系统更新<strong>，22点02分系统更新结束，检查3389端口正常，故障处理结束</strong>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宕机 </tag>
            
            <tag> MES </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
